## Контрольные вопросы:
- В чем разница между __процессом__ и __потоком?__

Процесс - это экземпляр программы, находящийся в состоянии выполнения, а поток - это путь выполнения кода программы. В Python процессы используются для параллельной работы, а потоки - для многопоточности.

- Почему мы не используем __многопоточность__ в __Python__?

Отсутствие в Python инструкций многопоточности связано с глобальной блокировкой интерпретатора (GIL). GIL — это механизм, который гарантирует, что только один поток может одновременно выполнять байт-код Python. По сути, это означает, что, хотя в процессе Python может существовать множество потоков, они не способны одновременно выполнять код Python. Это связано с тем, что GIL ограничивает интерпретатор одним потоком, что не позволяет другим потокам выполнять код Python.

- Какое максимальное количество процессов имеет смысл создавать в программе для параллельной работы?

Максимальное количество процессов, имеющее смысл создавать в программе для параллельной работы, зависит от характеристик системы, на которой программа запускается, и от задачи, которую выполняет программа.

- Как распараллеливание влияет на скорость работы программы? Может ли оно приводить к замеделению рассчётов?

Распараллеливание может ускорить работу программы, но также может привести к замедлению из-за дополнительных расходов на создание и управление процессами.

- Какие проблемы могут возникнуть при записи результатов работы разных процессов в один файл?

При записи результатов работы разных процессов в один файл могут возникнуть проблемы с синхронизацией доступа к файлу и возможными конфликтами при одновременной записи.

- Зачем нужен __mutex__ и как он работает?

__mutex__ нужен для обеспечения синхронизации доступа к ресурсу (например, файлу) из нескольких процессов или потоков. Он работает путем блокировки доступа к ресурсу для одного процесса или потока в определенный момент времени.

__mutex__ -  это механизм синхронизации, который используется для предотвращения одновременного доступа к общему ресурсу из нескольких потоков. Он нужен для обеспечения безопасности при работе с общими данными, чтобы избежать конфликты.

Mutex работает следующим образом: когда поток хочет получить доступ к общему ресурсу, он пытается заблокировать mutex. Если mutex уже заблокирован другим потоком, то текущий поток будет ждать, пока mutex не освободится. Когда доступ к общему ресурсу закончен, поток разблокирует mutex, позволяя другим потокам получить доступ к ресурсу.


- Какие особенности работы функции `Pool.map()`?

Функция Pool.map() используется для распараллеливания выполнения функций на нескольких процессах. Она принимает функцию и список аргументов и выполняет функцию параллельно на каждом аргументе, возвращая список результатов.


## Задания:
1) Написать обычную функцию, вычисляющую произведение 
двух матриц, задекорировать ее своим временным декоратором 
(реализация произведения должна быть своя, без обращения к 
`numpy` или `pandas`).
2) Написать функцию, выполняющую аналогичные 
вычисления, но с использованием библиотеки 
`multiprocessing`, причем функция должна принимать
аргументом число вспомогательных подпроцессов.
3) Построить график (можно использовать __excel__) функции 
__f(n) = T<sub>1</sub> / T<sub>n</sub>__,
где __T<sub>n</sub>__ - время работы функции
перемножения матриц с использованием __n__ подпроцессов, 
__T<sub>1</sub>__ - время работы линейного перемножения матриц, 
на матрицах из файлов __matrix_1.csv__, __matrix_2.csv__.
